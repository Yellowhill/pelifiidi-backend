# source: http://localhost:4466/pelifiidi/dev
# timestamp: Tue Apr 09 2019 09:01:15 GMT+0300 (Eastern European Summer Time)

type AggregateAuthor {
  count: Int!
}

type AggregateItem {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWebsite {
  count: Int!
}

type Author implements Node {
  id: ID!
  name: String!
  website: Website!
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item!]
}

"""A connection to a list of items."""
type AuthorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuthorEdge]!
  aggregate: AggregateAuthor!
}

input AuthorCreateInput {
  name: String!
  website: WebsiteCreateOneWithoutAuthorsInput!
  items: ItemCreateManyWithoutAuthorInput
}

input AuthorCreateManyWithoutWebsiteInput {
  create: [AuthorCreateWithoutWebsiteInput!]
  connect: [AuthorWhereUniqueInput!]
}

input AuthorCreateOneWithoutItemsInput {
  create: AuthorCreateWithoutItemsInput
  connect: AuthorWhereUniqueInput
}

input AuthorCreateWithoutItemsInput {
  name: String!
  website: WebsiteCreateOneWithoutAuthorsInput!
}

input AuthorCreateWithoutWebsiteInput {
  name: String!
  items: ItemCreateManyWithoutAuthorInput
}

"""An edge in a connection."""
type AuthorEdge {
  """The item at the end of the edge."""
  node: Author!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AuthorOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type AuthorPreviousValues {
  id: ID!
  name: String!
}

input AuthorScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthorScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthorScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthorScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type AuthorSubscriptionPayload {
  mutation: MutationType!
  node: Author
  updatedFields: [String!]
  previousValues: AuthorPreviousValues
}

input AuthorSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthorSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AuthorWhereInput
}

input AuthorUpdateInput {
  name: String
  website: WebsiteUpdateOneRequiredWithoutAuthorsInput
  items: ItemUpdateManyWithoutAuthorInput
}

input AuthorUpdateManyDataInput {
  name: String
}

input AuthorUpdateManyMutationInput {
  name: String
}

input AuthorUpdateManyWithoutWebsiteInput {
  create: [AuthorCreateWithoutWebsiteInput!]
  connect: [AuthorWhereUniqueInput!]
  set: [AuthorWhereUniqueInput!]
  disconnect: [AuthorWhereUniqueInput!]
  delete: [AuthorWhereUniqueInput!]
  update: [AuthorUpdateWithWhereUniqueWithoutWebsiteInput!]
  updateMany: [AuthorUpdateManyWithWhereNestedInput!]
  deleteMany: [AuthorScalarWhereInput!]
  upsert: [AuthorUpsertWithWhereUniqueWithoutWebsiteInput!]
}

input AuthorUpdateManyWithWhereNestedInput {
  where: AuthorScalarWhereInput!
  data: AuthorUpdateManyDataInput!
}

input AuthorUpdateOneRequiredWithoutItemsInput {
  create: AuthorCreateWithoutItemsInput
  connect: AuthorWhereUniqueInput
  update: AuthorUpdateWithoutItemsDataInput
  upsert: AuthorUpsertWithoutItemsInput
}

input AuthorUpdateWithoutItemsDataInput {
  name: String
  website: WebsiteUpdateOneRequiredWithoutAuthorsInput
}

input AuthorUpdateWithoutWebsiteDataInput {
  name: String
  items: ItemUpdateManyWithoutAuthorInput
}

input AuthorUpdateWithWhereUniqueWithoutWebsiteInput {
  where: AuthorWhereUniqueInput!
  data: AuthorUpdateWithoutWebsiteDataInput!
}

input AuthorUpsertWithoutItemsInput {
  update: AuthorUpdateWithoutItemsDataInput!
  create: AuthorCreateWithoutItemsInput!
}

input AuthorUpsertWithWhereUniqueWithoutWebsiteInput {
  where: AuthorWhereUniqueInput!
  update: AuthorUpdateWithoutWebsiteDataInput!
  create: AuthorCreateWithoutWebsiteInput!
}

input AuthorWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthorWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  website: WebsiteWhereInput
  items_some: ItemWhereInput
}

input AuthorWhereUniqueInput {
  id: ID
  name: String
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type InlineLink {
  text: String!
  url: String!
}

input InlineLinkCreateInput {
  text: String!
  url: String!
}

input InlineLinkCreateManyInput {
  create: [InlineLinkCreateInput!]
}

input InlineLinkRestrictedWhereInput {
  """Logical AND on all given filters."""
  AND: [InlineLinkRestrictedWhereInput!]
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
}

input InlineLinkWhereInput {
  """Logical AND on all given filters."""
  AND: [InlineLinkWhereInput!]
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
}

type Item implements Node {
  id: ID!
  website: Website!
  title: String!
  description: String
  url: String!
  smallImg: String
  largeImg: String
  author: Author!
  embeddedYoutubeLinks: [String!]!
  embeddedTweets: [String!]!
  publishDate: DateTime!
  textContent: [TextContent!]
}

"""A connection to a list of items."""
type ItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemEdge]!
  aggregate: AggregateItem!
}

input ItemCreateembeddedTweetsInput {
  set: [String!]
}

input ItemCreateembeddedYoutubeLinksInput {
  set: [String!]
}

input ItemCreateInput {
  title: String!
  description: String
  url: String!
  smallImg: String
  largeImg: String
  publishDate: DateTime!
  embeddedYoutubeLinks: ItemCreateembeddedYoutubeLinksInput
  embeddedTweets: ItemCreateembeddedTweetsInput
  website: WebsiteCreateOneWithoutItemsInput!
  author: AuthorCreateOneWithoutItemsInput!
  textContent: TextContentCreateManyInput
}

input ItemCreateManyInput {
  create: [ItemCreateInput!]
  connect: [ItemWhereUniqueInput!]
}

input ItemCreateManyWithoutAuthorInput {
  create: [ItemCreateWithoutAuthorInput!]
  connect: [ItemWhereUniqueInput!]
}

input ItemCreateManyWithoutWebsiteInput {
  create: [ItemCreateWithoutWebsiteInput!]
  connect: [ItemWhereUniqueInput!]
}

input ItemCreateWithoutAuthorInput {
  title: String!
  description: String
  url: String!
  smallImg: String
  largeImg: String
  publishDate: DateTime!
  embeddedYoutubeLinks: ItemCreateembeddedYoutubeLinksInput
  embeddedTweets: ItemCreateembeddedTweetsInput
  website: WebsiteCreateOneWithoutItemsInput!
  textContent: TextContentCreateManyInput
}

input ItemCreateWithoutWebsiteInput {
  title: String!
  description: String
  url: String!
  smallImg: String
  largeImg: String
  publishDate: DateTime!
  embeddedYoutubeLinks: ItemCreateembeddedYoutubeLinksInput
  embeddedTweets: ItemCreateembeddedTweetsInput
  author: AuthorCreateOneWithoutItemsInput!
  textContent: TextContentCreateManyInput
}

"""An edge in a connection."""
type ItemEdge {
  """The item at the end of the edge."""
  node: Item!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ItemOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  smallImg_ASC
  smallImg_DESC
  largeImg_ASC
  largeImg_DESC
  publishDate_ASC
  publishDate_DESC
}

type ItemPreviousValues {
  id: ID!
  title: String!
  description: String
  url: String!
  smallImg: String
  largeImg: String
  embeddedYoutubeLinks: [String!]!
  embeddedTweets: [String!]!
  publishDate: DateTime!
}

input ItemScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  smallImg: String

  """All values that are not equal to given value."""
  smallImg_not: String

  """All values that are contained in given list."""
  smallImg_in: [String!]

  """All values that are not contained in given list."""
  smallImg_not_in: [String!]

  """All values less than the given value."""
  smallImg_lt: String

  """All values less than or equal the given value."""
  smallImg_lte: String

  """All values greater than the given value."""
  smallImg_gt: String

  """All values greater than or equal the given value."""
  smallImg_gte: String

  """All values containing the given string."""
  smallImg_contains: String

  """All values not containing the given string."""
  smallImg_not_contains: String

  """All values starting with the given string."""
  smallImg_starts_with: String

  """All values not starting with the given string."""
  smallImg_not_starts_with: String

  """All values ending with the given string."""
  smallImg_ends_with: String

  """All values not ending with the given string."""
  smallImg_not_ends_with: String
  largeImg: String

  """All values that are not equal to given value."""
  largeImg_not: String

  """All values that are contained in given list."""
  largeImg_in: [String!]

  """All values that are not contained in given list."""
  largeImg_not_in: [String!]

  """All values less than the given value."""
  largeImg_lt: String

  """All values less than or equal the given value."""
  largeImg_lte: String

  """All values greater than the given value."""
  largeImg_gt: String

  """All values greater than or equal the given value."""
  largeImg_gte: String

  """All values containing the given string."""
  largeImg_contains: String

  """All values not containing the given string."""
  largeImg_not_contains: String

  """All values starting with the given string."""
  largeImg_starts_with: String

  """All values not starting with the given string."""
  largeImg_not_starts_with: String

  """All values ending with the given string."""
  largeImg_ends_with: String

  """All values not ending with the given string."""
  largeImg_not_ends_with: String
  publishDate: DateTime

  """All values that are not equal to given value."""
  publishDate_not: DateTime

  """All values that are contained in given list."""
  publishDate_in: [DateTime!]

  """All values that are not contained in given list."""
  publishDate_not_in: [DateTime!]

  """All values less than the given value."""
  publishDate_lt: DateTime

  """All values less than or equal the given value."""
  publishDate_lte: DateTime

  """All values greater than the given value."""
  publishDate_gt: DateTime

  """All values greater than or equal the given value."""
  publishDate_gte: DateTime
}

type ItemSubscriptionPayload {
  mutation: MutationType!
  node: Item
  updatedFields: [String!]
  previousValues: ItemPreviousValues
}

input ItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ItemWhereInput
}

input ItemUpdateDataInput {
  title: String
  description: String
  url: String
  smallImg: String
  largeImg: String
  publishDate: DateTime
  embeddedYoutubeLinks: ItemUpdateembeddedYoutubeLinksInput
  embeddedTweets: ItemUpdateembeddedTweetsInput
  website: WebsiteUpdateOneRequiredWithoutItemsInput
  author: AuthorUpdateOneRequiredWithoutItemsInput
  textContent: TextContentUpdateManyInput
}

input ItemUpdateembeddedTweetsInput {
  set: [String!]
}

input ItemUpdateembeddedYoutubeLinksInput {
  set: [String!]
}

input ItemUpdateInput {
  title: String
  description: String
  url: String
  smallImg: String
  largeImg: String
  publishDate: DateTime
  embeddedYoutubeLinks: ItemUpdateembeddedYoutubeLinksInput
  embeddedTweets: ItemUpdateembeddedTweetsInput
  website: WebsiteUpdateOneRequiredWithoutItemsInput
  author: AuthorUpdateOneRequiredWithoutItemsInput
  textContent: TextContentUpdateManyInput
}

input ItemUpdateManyDataInput {
  title: String
  description: String
  url: String
  smallImg: String
  largeImg: String
  publishDate: DateTime
  embeddedYoutubeLinks: ItemUpdateembeddedYoutubeLinksInput
  embeddedTweets: ItemUpdateembeddedTweetsInput
}

input ItemUpdateManyInput {
  create: [ItemCreateInput!]
  connect: [ItemWhereUniqueInput!]
  set: [ItemWhereUniqueInput!]
  disconnect: [ItemWhereUniqueInput!]
  delete: [ItemWhereUniqueInput!]
  update: [ItemUpdateWithWhereUniqueNestedInput!]
  updateMany: [ItemUpdateManyWithWhereNestedInput!]
  deleteMany: [ItemScalarWhereInput!]
  upsert: [ItemUpsertWithWhereUniqueNestedInput!]
}

input ItemUpdateManyMutationInput {
  title: String
  description: String
  url: String
  smallImg: String
  largeImg: String
  publishDate: DateTime
  embeddedYoutubeLinks: ItemUpdateembeddedYoutubeLinksInput
  embeddedTweets: ItemUpdateembeddedTweetsInput
}

input ItemUpdateManyWithoutAuthorInput {
  create: [ItemCreateWithoutAuthorInput!]
  connect: [ItemWhereUniqueInput!]
  set: [ItemWhereUniqueInput!]
  disconnect: [ItemWhereUniqueInput!]
  delete: [ItemWhereUniqueInput!]
  update: [ItemUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [ItemUpdateManyWithWhereNestedInput!]
  deleteMany: [ItemScalarWhereInput!]
  upsert: [ItemUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ItemUpdateManyWithoutWebsiteInput {
  create: [ItemCreateWithoutWebsiteInput!]
  connect: [ItemWhereUniqueInput!]
  set: [ItemWhereUniqueInput!]
  disconnect: [ItemWhereUniqueInput!]
  delete: [ItemWhereUniqueInput!]
  update: [ItemUpdateWithWhereUniqueWithoutWebsiteInput!]
  updateMany: [ItemUpdateManyWithWhereNestedInput!]
  deleteMany: [ItemScalarWhereInput!]
  upsert: [ItemUpsertWithWhereUniqueWithoutWebsiteInput!]
}

input ItemUpdateManyWithWhereNestedInput {
  where: ItemScalarWhereInput!
  data: ItemUpdateManyDataInput!
}

input ItemUpdateWithoutAuthorDataInput {
  title: String
  description: String
  url: String
  smallImg: String
  largeImg: String
  publishDate: DateTime
  embeddedYoutubeLinks: ItemUpdateembeddedYoutubeLinksInput
  embeddedTweets: ItemUpdateembeddedTweetsInput
  website: WebsiteUpdateOneRequiredWithoutItemsInput
  textContent: TextContentUpdateManyInput
}

input ItemUpdateWithoutWebsiteDataInput {
  title: String
  description: String
  url: String
  smallImg: String
  largeImg: String
  publishDate: DateTime
  embeddedYoutubeLinks: ItemUpdateembeddedYoutubeLinksInput
  embeddedTweets: ItemUpdateembeddedTweetsInput
  author: AuthorUpdateOneRequiredWithoutItemsInput
  textContent: TextContentUpdateManyInput
}

input ItemUpdateWithWhereUniqueNestedInput {
  where: ItemWhereUniqueInput!
  data: ItemUpdateDataInput!
}

input ItemUpdateWithWhereUniqueWithoutAuthorInput {
  where: ItemWhereUniqueInput!
  data: ItemUpdateWithoutAuthorDataInput!
}

input ItemUpdateWithWhereUniqueWithoutWebsiteInput {
  where: ItemWhereUniqueInput!
  data: ItemUpdateWithoutWebsiteDataInput!
}

input ItemUpsertWithWhereUniqueNestedInput {
  where: ItemWhereUniqueInput!
  update: ItemUpdateDataInput!
  create: ItemCreateInput!
}

input ItemUpsertWithWhereUniqueWithoutAuthorInput {
  where: ItemWhereUniqueInput!
  update: ItemUpdateWithoutAuthorDataInput!
  create: ItemCreateWithoutAuthorInput!
}

input ItemUpsertWithWhereUniqueWithoutWebsiteInput {
  where: ItemWhereUniqueInput!
  update: ItemUpdateWithoutWebsiteDataInput!
  create: ItemCreateWithoutWebsiteInput!
}

input ItemWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  smallImg: String

  """All values that are not equal to given value."""
  smallImg_not: String

  """All values that are contained in given list."""
  smallImg_in: [String!]

  """All values that are not contained in given list."""
  smallImg_not_in: [String!]

  """All values less than the given value."""
  smallImg_lt: String

  """All values less than or equal the given value."""
  smallImg_lte: String

  """All values greater than the given value."""
  smallImg_gt: String

  """All values greater than or equal the given value."""
  smallImg_gte: String

  """All values containing the given string."""
  smallImg_contains: String

  """All values not containing the given string."""
  smallImg_not_contains: String

  """All values starting with the given string."""
  smallImg_starts_with: String

  """All values not starting with the given string."""
  smallImg_not_starts_with: String

  """All values ending with the given string."""
  smallImg_ends_with: String

  """All values not ending with the given string."""
  smallImg_not_ends_with: String
  largeImg: String

  """All values that are not equal to given value."""
  largeImg_not: String

  """All values that are contained in given list."""
  largeImg_in: [String!]

  """All values that are not contained in given list."""
  largeImg_not_in: [String!]

  """All values less than the given value."""
  largeImg_lt: String

  """All values less than or equal the given value."""
  largeImg_lte: String

  """All values greater than the given value."""
  largeImg_gt: String

  """All values greater than or equal the given value."""
  largeImg_gte: String

  """All values containing the given string."""
  largeImg_contains: String

  """All values not containing the given string."""
  largeImg_not_contains: String

  """All values starting with the given string."""
  largeImg_starts_with: String

  """All values not starting with the given string."""
  largeImg_not_starts_with: String

  """All values ending with the given string."""
  largeImg_ends_with: String

  """All values not ending with the given string."""
  largeImg_not_ends_with: String
  publishDate: DateTime

  """All values that are not equal to given value."""
  publishDate_not: DateTime

  """All values that are contained in given list."""
  publishDate_in: [DateTime!]

  """All values that are not contained in given list."""
  publishDate_not_in: [DateTime!]

  """All values less than the given value."""
  publishDate_lt: DateTime

  """All values less than or equal the given value."""
  publishDate_lte: DateTime

  """All values greater than the given value."""
  publishDate_gt: DateTime

  """All values greater than or equal the given value."""
  publishDate_gte: DateTime
  website: WebsiteWhereInput
  author: AuthorWhereInput
  textContent_some: TextContentWhereInput
  textContent_every: TextContentRestrictedWhereInput
  textContent_none: TextContentRestrictedWhereInput
}

input ItemWhereUniqueInput {
  id: ID
  url: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createWebsite(data: WebsiteCreateInput!): Website!
  createAuthor(data: AuthorCreateInput!): Author!
  createItem(data: ItemCreateInput!): Item!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateWebsite(data: WebsiteUpdateInput!, where: WebsiteWhereUniqueInput!): Website
  updateAuthor(data: AuthorUpdateInput!, where: AuthorWhereUniqueInput!): Author
  updateItem(data: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item
  deleteUser(where: UserWhereUniqueInput!): User
  deleteWebsite(where: WebsiteWhereUniqueInput!): Website
  deleteAuthor(where: AuthorWhereUniqueInput!): Author
  deleteItem(where: ItemWhereUniqueInput!): Item
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertWebsite(where: WebsiteWhereUniqueInput!, create: WebsiteCreateInput!, update: WebsiteUpdateInput!): Website!
  upsertAuthor(where: AuthorWhereUniqueInput!, create: AuthorCreateInput!, update: AuthorUpdateInput!): Author!
  upsertItem(where: ItemWhereUniqueInput!, create: ItemCreateInput!, update: ItemUpdateInput!): Item!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyWebsites(data: WebsiteUpdateManyMutationInput!, where: WebsiteWhereInput): BatchPayload!
  updateManyAuthors(data: AuthorUpdateManyMutationInput!, where: AuthorWhereInput): BatchPayload!
  updateManyItems(data: ItemUpdateManyMutationInput!, where: ItemWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyWebsites(where: WebsiteWhereInput): BatchPayload!
  deleteManyAuthors(where: AuthorWhereInput): BatchPayload!
  deleteManyItems(where: ItemWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  websites(where: WebsiteWhereInput, orderBy: WebsiteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Website]!
  authors(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Author]!
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item]!
  user(where: UserWhereUniqueInput!): User
  website(where: WebsiteWhereUniqueInput!): Website
  author(where: AuthorWhereUniqueInput!): Author
  item(where: ItemWhereUniqueInput!): Item
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  websitesConnection(where: WebsiteWhereInput, orderBy: WebsiteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WebsiteConnection!
  authorsConnection(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthorConnection!
  itemsConnection(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ItemConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  website(where: WebsiteSubscriptionWhereInput): WebsiteSubscriptionPayload
  author(where: AuthorSubscriptionWhereInput): AuthorSubscriptionPayload
  item(where: ItemSubscriptionWhereInput): ItemSubscriptionPayload
}

type TextContent {
  text: String!
  inlineLinks: [InlineLink!]
}

input TextContentCreateInput {
  text: String!
  inlineLinks: InlineLinkCreateManyInput
}

input TextContentCreateManyInput {
  create: [TextContentCreateInput!]
}

input TextContentRestrictedWhereInput {
  """Logical AND on all given filters."""
  AND: [TextContentRestrictedWhereInput!]
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  inlineLinks_every: InlineLinkRestrictedWhereInput
  inlineLinks_some: InlineLinkRestrictedWhereInput
  inlineLinks_none: InlineLinkRestrictedWhereInput
}

input TextContentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TextContentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TextContentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TextContentScalarWhereInput!]
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
}

input TextContentUpdateManyDataInput {
  text: String
}

input TextContentUpdateManyInput {
  create: [TextContentCreateInput!]
  updateMany: [TextContentUpdateManyWithWhereNestedInput!]
  deleteMany: [TextContentScalarWhereInput!]
}

input TextContentUpdateManyWithWhereNestedInput {
  where: TextContentScalarWhereInput!
  data: TextContentUpdateManyDataInput!
}

input TextContentWhereInput {
  """Logical AND on all given filters."""
  AND: [TextContentWhereInput!]
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  inlineLinks_some: InlineLinkWhereInput
  inlineLinks_every: InlineLinkRestrictedWhereInput
  inlineLinks_none: InlineLinkRestrictedWhereInput
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  bookmarks(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  bookmarks: ItemCreateManyInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  bookmarks: ItemUpdateManyInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  bookmarks_some: ItemWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Website implements Node {
  id: ID!
  name: String!
  url: String!
  logo: String
  authors(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Author!]
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item!]
}

"""A connection to a list of items."""
type WebsiteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WebsiteEdge]!
  aggregate: AggregateWebsite!
}

input WebsiteCreateInput {
  name: String!
  url: String!
  logo: String
  authors: AuthorCreateManyWithoutWebsiteInput
  items: ItemCreateManyWithoutWebsiteInput
}

input WebsiteCreateOneWithoutAuthorsInput {
  create: WebsiteCreateWithoutAuthorsInput
  connect: WebsiteWhereUniqueInput
}

input WebsiteCreateOneWithoutItemsInput {
  create: WebsiteCreateWithoutItemsInput
  connect: WebsiteWhereUniqueInput
}

input WebsiteCreateWithoutAuthorsInput {
  name: String!
  url: String!
  logo: String
  items: ItemCreateManyWithoutWebsiteInput
}

input WebsiteCreateWithoutItemsInput {
  name: String!
  url: String!
  logo: String
  authors: AuthorCreateManyWithoutWebsiteInput
}

"""An edge in a connection."""
type WebsiteEdge {
  """The item at the end of the edge."""
  node: Website!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WebsiteOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  url_ASC
  url_DESC
  logo_ASC
  logo_DESC
}

type WebsitePreviousValues {
  id: ID!
  name: String!
  url: String!
  logo: String
}

type WebsiteSubscriptionPayload {
  mutation: MutationType!
  node: Website
  updatedFields: [String!]
  previousValues: WebsitePreviousValues
}

input WebsiteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WebsiteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WebsiteWhereInput
}

input WebsiteUpdateInput {
  name: String
  url: String
  logo: String
  authors: AuthorUpdateManyWithoutWebsiteInput
  items: ItemUpdateManyWithoutWebsiteInput
}

input WebsiteUpdateManyMutationInput {
  name: String
  url: String
  logo: String
}

input WebsiteUpdateOneRequiredWithoutAuthorsInput {
  create: WebsiteCreateWithoutAuthorsInput
  connect: WebsiteWhereUniqueInput
  update: WebsiteUpdateWithoutAuthorsDataInput
  upsert: WebsiteUpsertWithoutAuthorsInput
}

input WebsiteUpdateOneRequiredWithoutItemsInput {
  create: WebsiteCreateWithoutItemsInput
  connect: WebsiteWhereUniqueInput
  update: WebsiteUpdateWithoutItemsDataInput
  upsert: WebsiteUpsertWithoutItemsInput
}

input WebsiteUpdateWithoutAuthorsDataInput {
  name: String
  url: String
  logo: String
  items: ItemUpdateManyWithoutWebsiteInput
}

input WebsiteUpdateWithoutItemsDataInput {
  name: String
  url: String
  logo: String
  authors: AuthorUpdateManyWithoutWebsiteInput
}

input WebsiteUpsertWithoutAuthorsInput {
  update: WebsiteUpdateWithoutAuthorsDataInput!
  create: WebsiteCreateWithoutAuthorsInput!
}

input WebsiteUpsertWithoutItemsInput {
  update: WebsiteUpdateWithoutItemsDataInput!
  create: WebsiteCreateWithoutItemsInput!
}

input WebsiteWhereInput {
  """Logical AND on all given filters."""
  AND: [WebsiteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  logo: String

  """All values that are not equal to given value."""
  logo_not: String

  """All values that are contained in given list."""
  logo_in: [String!]

  """All values that are not contained in given list."""
  logo_not_in: [String!]

  """All values less than the given value."""
  logo_lt: String

  """All values less than or equal the given value."""
  logo_lte: String

  """All values greater than the given value."""
  logo_gt: String

  """All values greater than or equal the given value."""
  logo_gte: String

  """All values containing the given string."""
  logo_contains: String

  """All values not containing the given string."""
  logo_not_contains: String

  """All values starting with the given string."""
  logo_starts_with: String

  """All values not starting with the given string."""
  logo_not_starts_with: String

  """All values ending with the given string."""
  logo_ends_with: String

  """All values not ending with the given string."""
  logo_not_ends_with: String
  authors_some: AuthorWhereInput
  items_some: ItemWhereInput
}

input WebsiteWhereUniqueInput {
  id: ID
  name: String
  url: String
}
